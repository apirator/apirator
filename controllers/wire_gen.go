// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package controllers

import (
	"github.com/apirator/apirator/internal/apimock"
	client2 "github.com/apirator/apirator/internal/client"
	"github.com/apirator/apirator/internal/objects"
	"github.com/apirator/apirator/internal/openapi"
	"github.com/apirator/apirator/internal/usecase"
	"github.com/getkin/kin-openapi/openapi3"
	"k8s.io/apimachinery/pkg/runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// Injectors from wire.go:

func newAPIMockReconciler(clientClient client.Client, scheme *runtime.Scheme) (*APIMockReconciler, error) {
	kubernetes := &client2.Kubernetes{
		Client: clientClient,
	}
	builder := objects.NewBuilder(scheme)
	configMap := usecase.NewConfigMap(builder, kubernetes, kubernetes)
	deployment := usecase.NewDeployment(builder, kubernetes, kubernetes)
	deploymentAvailability := usecase.NewDeploymentAvailability(kubernetes, kubernetes)
	ingress := usecase.NewIngress(builder, kubernetes, kubernetes, kubernetes)
	ingressFinalizer := usecase.NewIngressFinalizer(kubernetes)
	loader := openapi3.NewLoader()
	validator := openapi.NewValidator(loader)
	openAPIDefinition := usecase.NewOpenAPIDefinition(validator, kubernetes)
	service := usecase.NewService(builder, kubernetes, kubernetes)
	status := usecase.NewStatus(kubernetes)
	adapter := &apimock.Adapter{
		ConfigMap:              configMap,
		Deployment:             deployment,
		DeploymentAvailability: deploymentAvailability,
		Ingress:                ingress,
		IngressFinalizer:       ingressFinalizer,
		OpenAPIDefinition:      openAPIDefinition,
		Service:                service,
		Status:                 status,
	}
	apiMockReconciler := &APIMockReconciler{
		APIMockReader:  kubernetes,
		APIMockAdapter: adapter,
	}
	return apiMockReconciler, nil
}
